import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // Try running your application with "flutter run". You'll see the
        // application has a blue toolbar. Then, without quitting the app, try
        // changing the primarySwatch below to Colors.green and then invoke
        // "hot reload" (press "r" in the console where you ran "flutter run",
        // or simply save your changes to "hot reload" in a Flutter IDE).
        // Notice that the counter didn't reset back to zero; the application
        // is not restarted.
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title}) : super(key: key);

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      // This call to setState tells the Flutter framework that something has
      // changed in this State, which causes it to rerun the build method below
      // so that the display can reflect the updated values. If we changed
      // _counter without calling setState(), then the build method would not be
      // called again, and so nothing would appear to happen.
      _counter=_counter+2;
    });
  }

  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      appBar: AppBar(
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.title),
      ),
      body: Center(
        // Center is a layout widget. It takes a single child and positions it
        // in the middle of the parent.
        child: Column(
          // Column is also a layout widget. It takes a list of children and
          // arranges them vertically. By default, it sizes itself to fit its
          // children horizontally, and tries to be as tall as its parent.
          //
          // Invoke "debug painting" (press "p" in the console, choose the
          // "Toggle Debug Paint" action from the Flutter Inspector in Android
          // Studio, or the "Toggle Debug Paint" command in Visual Studio Code)
          // to see the wireframe for each widget.
          //
          // Column has various properties to control how it sizes itself and
          // how it positions its children. Here we use mainAxisAlignment to
          // center the children vertically; the main axis here is the vertical
          // axis because Columns are vertical (the cross axis would be
          // horizontal).
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Text(
              'You have pushed the button this many times:',
            ),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headline4,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}









// Appbar
 appBar: new AppBar(
          backgroundColor: Colors.cyanAccent,
          elevation: 0,
          title: new Align(
            alignment: Alignment.center,
            child:Text("Share Food",style: TextStyle(color: Colors.indigo.shade900),
            ),
          ),
        ),



















         Route _createRoute(){
   return PageRouteBuilder(
     pageBuilder:(context,animation,secondaryAnimation)=>ResLogin(),
     transitionDuration:  Duration(milliseconds: 500),
     reverseTransitionDuration: Duration(milliseconds: 500),
     transitionsBuilder: (context,animation,secondaryAnimation,child)
     {
       var screenSize= MediaQuery.of(context).size;
       var centerCircleClipper=Offset(screenSize.width/2, screenSize.height/2);
        double beginRadius=0.0;
        double endRadius=screenSize.height*1.2;
        var radiusTween =Tween(begin:beginRadius,end:endRadius);
        var radiusTweenAnimation =animation.drive(radiusTween);
        return ClipPath(
          child:child,
          clipper:CircleTransition(
            radius:radiusTweenAnimation.value,
            center: centerCircleClipper,
          ),
        );
     },
     );

 }






















 final AuthService _auth = AuthService();
  final TextEditingController controller = new TextEditingController();
  String email = '';
  String password = '';
  String error = '';
  double windowWidth = 0;
  double windowHeight = 0;
  final _formKey = GlobalKey<FormState>();
  bool _isVisible = false;
  bool load = false;

  bool _isPasdEight = false;
  bool _hasPassdOneNum = false;
  onPasswordChanged(String val) {
    final numericRegex = RegExp(r'[0-9]');
    setState(() {
      _isPasdEight = false;
      if (val.length >= 8) _isPasdEight = true;
      _hasPassdOneNum = false;
      if (numericRegex.hasMatch(val)) _hasPassdOneNum = true;
    });
  }

  @override
  Widget build(BuildContext context) {
    var size = MediaQuery.of(context).size;
    windowHeight = MediaQuery.of(context).size.height;
    windowWidth = MediaQuery.of(context).size.width;
    return load
        ? Load()
        : Stack(
            children: <Widget>[
              ShaderMask(
                shaderCallback: (rect) => LinearGradient(
                  begin: Alignment.bottomCenter,
                  end: Alignment.center,
                  colors: [Colors.black, Colors.transparent],
                ).createShader(rect),
                blendMode: BlendMode.darken,
                child: Container(
                  decoration: BoxDecoration(
                      image: DecorationImage(
                          image: AssetImage('assets/images/user_reg.jfif'),
                          fit: BoxFit.cover,
                          colorFilter: ColorFilter.mode(
                              Colors.black54, BlendMode.darken))),
                ),
              ),
              Scaffold(
                resizeToAvoidBottomInset: false,
                backgroundColor: Colors.transparent,
                body: Column(
                  children: <Widget>[
                    Container(
                      padding: EdgeInsets.only(left: 35, top: 160, right: 35),
                      child: Text('Sign Up',
                          style: TextStyle(
                              color: Colors.white,
                              fontSize: 39,
                              fontFamily: 'Nunito regular')),
                    ),
                    SingleChildScrollView(
                      child: Container(
                        padding: EdgeInsets.only(left: 35, right: 35),
                        decoration: BoxDecoration(
                            color: Colors.transparent,
                            borderRadius: BorderRadius.circular(16)),
                        child: Form(
                            key: _formKey,
                            child: Column(
                              children: <Widget>[
                                TextFormField(
                                  validator: (emanamil) => email != null &&
                                          !EmailValidator.validate(email)
                                      ? 'Enter a valid Email'
                                      : null,
                                  decoration: InputDecoration(
                                      fillColor:
                                          Colors.grey[500]!.withOpacity(0.2),
                                      filled: true,
                                      prefixIcon: Icon(
                                        Icons.email,
                                        color: Colors.black,
                                      ),
                                      border: OutlineInputBorder(
                                          borderRadius:
                                              BorderRadius.circular(50),
                                          borderSide:
                                              BorderSide(color: Colors.black)),
                                      focusedBorder: OutlineInputBorder(
                                          borderRadius:
                                              BorderRadius.circular(10),
                                          borderSide:
                                              BorderSide(color: Colors.white)),
                                      hintText: 'email...',
                                      hintStyle:
                                          TextStyle(color: Colors.white54)),
                                  keyboardType: TextInputType.emailAddress,
                                  onChanged: (val) {
                                    setState(() => email = val);
                                  },
                                ),
                                SizedBox(height: 10),
                                TextFormField(
                                  validator: (password) {
                                    if (password == null || password.isEmpty)
                                      return 'Password is required';
                                    String counnt = r'^.{8}';
                                    RegExp regExp = RegExp(counnt);
                                    if (!regExp.hasMatch(password))
                                      return '''Password must be at least 8 charecters ''';
                                    String pattren =
                                        r'^(?=.*?[a-z])(?=.*?[0-9])';
                                    RegExp regExp1 = RegExp(pattren);
                                    if (!regExp1.hasMatch(password))
                                      return '''Password must be at least contain  one number''';
                                  },
                                  obscureText: !_isVisible,
                                  onChanged: (val) {
                                    onPasswordChanged(val);
                                    setState(() => password = val);
                                  },
                                  decoration: InputDecoration(
                                    fillColor:
                                        Colors.grey[500]!.withOpacity(0.2),
                                    filled: true,
                                    prefixIcon: Icon(
                                      Icons.vpn_key,
                                      color: Colors.black,
                                    ),
                                    border: OutlineInputBorder(
                                        borderRadius: BorderRadius.circular(50),
                                        borderSide:
                                            BorderSide(color: Colors.black)),
                                    focusedBorder: OutlineInputBorder(
                                        borderRadius: BorderRadius.circular(10),
                                        borderSide:
                                            BorderSide(color: Colors.white)),
                                    hintText: 'Enter Password...',
                                    hintStyle: TextStyle(color: Colors.white54),
                                    suffixIcon: IconButton(
                                      onPressed: () {
                                        setState(() {
                                          _isVisible = !_isVisible;
                                        });
                                      },
                                      icon: _isVisible
                                          ? Icon(
                                              Icons.visibility,
                                              color: Colors.black,
                                            )
                                          : Icon(
                                              Icons.visibility_off,
                                              color: Colors.grey,
                                            ),
                                    ),
                                  ),
                                ),
                                SizedBox(
                                  height: 10,
                                ),
                                Row(
                                  children: [
                                    AnimatedContainer(
                                      duration: Duration(milliseconds: 500),
                                      width: 20,
                                      height: 20,
                                      decoration: BoxDecoration(
                                          color: _isPasdEight
                                              ? Colors.green
                                              : Colors.transparent,
                                          border: _isPasdEight
                                              ? Border.all(
                                                  color: Colors.transparent)
                                              : Border.all(
                                                  color: Colors.grey.shade400),
                                          borderRadius:
                                              BorderRadius.circular(50)),
                                      child: Center(
                                        child: Icon(
                                          Icons.check,
                                          color: Colors.white,
                                          size: 15,
                                        ),
                                      ),
                                    ),
                                    SizedBox(
                                      width: 10,
                                    ),
                                    Text("Must Contain atleast 8 Charecters",
                                        style: TextStyle(
                                            color: Colors.white54,
                                            fontFamily: "Montserrat Regular",
                                            fontWeight: FontWeight.bold)),
                                  ],
                                ),
                                SizedBox(height: 10),
                                Row(children: [
                                  AnimatedContainer(
                                    duration: Duration(milliseconds: 500),
                                    width: 20,
                                    height: 20,
                                    decoration: BoxDecoration(
                                        color: _hasPassdOneNum
                                            ? Colors.green
                                            : Colors.transparent,
                                        border: _hasPassdOneNum
                                            ? Border.all(
                                                color: Colors.transparent)
                                            : Border.all(
                                                color: Colors.grey.shade400),
                                        borderRadius:
                                            BorderRadius.circular(50)),
                                    child: Center(
                                      child: Icon(
                                        Icons.check,
                                        color: Colors.white,
                                        size: 15,
                                      ),
                                    ),
                                  ),
                                  SizedBox(
                                    width: 10,
                                  ),
                                  Text(
                                    "Must Contain atleast 1 Number",
                                    style: TextStyle(
                                        color: Colors.white54,
                                        fontFamily: "Montserrat Regular",
                                        fontWeight: FontWeight.bold),
                                  ),
                                ]),
                                SingleChildScrollView(
                                  child: Container(
                                      padding: EdgeInsets.only(
                                          top: 0, right: 11, left: 11),
                                      height: 40,
                                      decoration: BoxDecoration(
                                        borderRadius: BorderRadius.circular(16),
                                        color: Colors.blue,
                                      ),
                                      child: TextButton(
                                        onPressed: () async {
                                          if (_formKey.currentState!
                                              .validate()) {
                                            setState(() => load = true);

                                            dynamic result =
                                                await _auth.registerWithEmail(
                                                    email, password);
                                            if (result == null) {
                                              setState(() {
                                                error =
                                                    'Could not Login with these credentials';
                                                load = false;
                                              });
                                            } else {}
                                          }
                                          ;
                                        },
                                        child: Text(
                                          'Signup',
                                          style: TextStyle(
                                              fontFamily: 'Montserrat-Regular',
                                              fontSize: 20,
                                              color: Colors.black),
                                        ),
                                      )),
                                )
                              ],
                            )),
                      ),
                    ),
                  ],
                ),
              )
            ],
          );
  }
}